{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_STATE","App","useState","input","setInput","approvedList","setApprovedList","isError","setIsError","className","href","target","rel","data-ribbon","title","onSubmit","e","preventDefault","money","currencyParser","tryParse","value","type","placeholder","onChange","length","scope","map","idx","formatted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAKMA,EAAgB,CACpB,CAAC,eAAgB,QACjB,CAAC,2BAA4B,SAC7B,CAAC,gBAAiB,YAgELC,MA9Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAE2BF,mBAAqBF,GAFhD,mBAENK,EAFM,KAEQC,EAFR,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAgBb,OACE,sBAAKC,UAAU,iBAAf,UACE,mBAAGA,UAAU,kCAAkCC,KAAK,sDAAsDC,OAAO,SAASC,IAAI,aAAaC,cAAY,oBAAoBC,MAAM,oBAAjL,+BACA,0DACA,yJACA,uBAAMC,SAhBW,SAACC,GAEpB,GADAA,EAAEC,iBACY,KAAVd,EACJ,IACE,IAAMe,EAAQC,iBAAeC,SAASjB,GACtCG,EAAgB,GAAD,mBAAKD,GAAL,CAAmB,CAACF,EAAOe,EAAMG,UAChDjB,EAAS,IACT,MAAOY,GACPR,GAAW,KAQmBC,UAAU,OAAxC,UACE,sBAAKA,UAAS,8BAAyBF,EAAU,cAAgB,IAAjE,UACE,uBACEe,KAAK,OACLb,UAAS,gCAA2BF,EAAU,cAAgB,IAC9Dc,MAAOlB,EACPoB,YAAY,wBACZC,SAAU,SAACR,GACTZ,EAASY,EAAEL,OAAOU,OAClBb,GAAW,MAEf,qBAAKC,UAAU,mBAAf,8CAEF,wBAAQa,KAAK,SAASb,UAAU,uBAAhC,uBAEDJ,EAAaoB,OAAS,GACrB,qCACE,oBAAIhB,UAAU,OAAd,8BACA,wBAAOA,UAAU,oBAAjB,UACE,gCACE,+BACE,oBAAIiB,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,kCAGJ,gCACGrB,EAAasB,KAAI,WAAqBC,GAArB,uBAAEzB,EAAF,KAAS0B,EAAT,YAChB,qBAAIpB,UAAU,cAAd,UACE,6BAAKN,IACL,mCAAM0B,OAFyBD,kBC5ClCE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9e1f003d.chunk.js","sourcesContent":["import { currencyParser } from '@ticklepoke/natural-text-currency';\nimport React, { FormEvent, useState } from 'react';\nimport './bootstrap.css'\nimport './App.css'\n\nconst DEFAULT_STATE = [\n  ['1000 dollars', '1000'],\n  ['10,000 singapore dollars', '10000'],\n  ['123,456 cents', '1234.56']\n]\nfunction App() {\n  const [input, setInput] = useState(\"\")\n  const [approvedList, setApprovedList] = useState<string[][]>(DEFAULT_STATE)\n  const [isError, setIsError] = useState(false)\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault()\n    if (input === \"\") return\n    try {\n      const money = currencyParser.tryParse(input)\n      setApprovedList([...approvedList, [input, money.value]])\n      setInput(\"\")\n    } catch (e) {\n      setIsError(true)\n    }\n  }\n  return (\n    <div className=\"container pt-3\">\n      <a className=\"github-fork-ribbon right-bottom\" href=\"https://github.com/ticklepoke/natural-text-currency\" target=\"_blank\" rel=\"noreferrer\" data-ribbon=\"View me on GitHub\" title=\"View me on GitHub\">Fork me on GitHub</a>\n      <h3>Free-form currency input</h3>\n      <span>Typing currency values can be easy and fun. Try different ways to type a currency value and let us do the formatting!</span>\n      <form onSubmit={handleSubmit} className=\"mt-3\">\n        <div className={`col-sm-10 form-group${isError ? \" has-danger\" : \"\"}`}>\n          <input\n            type=\"text\"\n            className={`form-control-plaintext${isError ? \" is-invalid\" : \"\"}`}\n            value={input}\n            placeholder=\"100 singapore dollars\"\n            onChange={(e) => {\n              setInput(e.target.value);\n              setIsError(false);\n            }} />\n          <div className=\"invalid-feedback\">This format is not supported!</div>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">Submit</button>\n      </form>\n      {approvedList.length > 0 && (\n        <>\n          <h5 className=\"mt-4\">Supported values</h5>\n          <table className=\"table table-hover\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Input</th>\n                <th scope=\"col\">Formatted Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {approvedList.map(([input, formatted], idx) =>\n                <tr className=\"table-light\" key={idx} >\n                  <td>{input}</td>\n                  <td>${formatted}</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </>\n      )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}